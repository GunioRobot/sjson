h1. SJSON

SJSON supports serialization of Scala objects into JSON. It implements support for built in Scala structures like List, Map or String as well as custom objects. 

Example: I have a Scala object as ..
<pre>
val addr = Address("Market Street", "San Francisco", "956871")
</pre>

where Address is a custom class defined by the user. Using SJSON, I can store it as JSON and retrieve as plain old Scala object. Hereâ€™s the simple assertion that validates the invariant. Note that during de-serialziation, the class name is specified. Hence what it gives back is an instance of Address.
<pre>
addr should equal(
  serializer.in[Address](serializer.out(addr)))
</pre>
Note, that the class needs to have a default constructor. Otherwise the deserialization into the specified class will fail.

There are situations, particularly when writing generic persistence libraries in Akka, when the exact class is not known during de-serialization. Using SJSON I can get it as AnyRef or Nothing ..
<pre>
serializer.in[AnyRef](serializer.out(addr))
</pre>

or just as ..
<pre>
serializer.in(serializer.out(addr))
</pre>

What you get back from is a JsValue, an abstraction of the JSON object model. For details of JsValue implementation, refer to "dispatch-json":http://databinder.net/dispatch/About that SJSON uses as the underlying JSON parser implementation. Once I have the JsValue model, I can use use extractors to get back individual attributes ..
<pre>
val a = serializer.in[AnyRef](serializer.out(addr))
// use extractors
val c = 'city ? str
val c(ci) = a
ci should equal("San Francisco")

val s = 'street ? str
val s(st) = a
st should equal("Market Street")

val z = 'zip ? str
val z(zp) = a
zp should equal("956871")
</pre>

h3. Serialization of Embedded Objects

SJSON supports serialization of Scala objects that have other embedded objects. Suppose you have the following Scala classes .. Here Contact has an embedded Address Map ..
<pre>
@BeanInfo
case class Contact(name: String,
                   @JSONTypeHint(classOf[Address])
                   addresses: Map[String, Address]) {

  override def toString = "name = " + name + " addresses = " +
    addresses.map(a => a._1 + ":" + a._2.toString).mkString(",")
}

@BeanInfo
case class Address(street: String, city: String, zip: String) {
  override def toString = "address = " + street + "/" + city + "/" + zip
}
</pre>

With SJSON, I can do the following:

<pre>
val a1 = Address("Market Street", "San Francisco", "956871")
val a2 = Address("Monroe Street", "Denver", "80231")
val a3 = Address("North Street", "Atlanta", "987671")
val c = Contact("Bob", Map("residence" -> a1, "office" -> a2, "club" -> a3))

val co = serializer.out(c)

// with class specified
c should equal(serializer.in[Contact](co))

// no class specified
val a = serializer.in[AnyRef](co)

// extract name
val n = 'name ? str
val n(_name) = a
"Bob" should equal(_name)

// extract addresses
val addrs = 'addresses ? obj
val addrs(_addresses) = a

// extract residence from addresses
val res = 'residence ? obj
val res(_raddr) = _addresses

// make an Address bean out of _raddr
val address = JsBean.fromJSON(_raddr, Some(classOf[Address]))
a1 should equal(address)

object r { def ># [T](f: JsF[T]) = f(a.asInstanceOf[JsValue]) }

// still better: chain 'em up
"Market Street" should equal(
  (r ># { ('addresses ? obj) andThen ('residence ? obj) andThen ('street ? str) }))
</pre>

h3. Changing property names during serialization

<pre>
@BeanInfo
case class Book(id: Number,
           title: String, @JSONProperty("ISBN") isbn: String) {

  override def toString = "id = " + id + " title = " + title + " isbn = " + isbn
}
</pre>

When this will be serialized out, the property name will be changed.
<pre>
val b = new Book(100, "A Beautiful Mind", "012-456372")
val jsBook = Js(JsBean.toJSON(b))
val expected_book_map = Map(
  JsString("id") -> JsNumber(100),
  JsString("title") -> JsString("A Beautiful Mind"),
  JsString("ISBN") -> JsString("012-456372")
)
</pre>

h3. Serialization with ignore properties

When serializing objects, some of the properties can be ignored declaratively. Consider the following class declaration:
<pre>
@BeanInfo
case class Journal(id: BigDecimal,
                    title: String,
                    author: String,
                    @JSONProperty {val ignore = true} issn: String) {

  override def toString =
    "Journal: " + id + "/" + title + "/" + author +
      (issn match {
          case null => ""
          case _ => "/" + issn
        })
}
</pre>

The annotation @JSONProperty can be used to selectively ignore fields. When I serialize a Journal object out and then back in, the content of issn field will be null.
<pre>
it("should ignore issn field") {
    val j = Journal(100, "IEEE Computer", "Alex Payne", "012-456372")
    serializer.in[Journal](serializer.out(j)).asInstanceOf[Journal].issn should equal(null)
}
</pre>

Similarly, we can ignore properties of an object **only** if they are null and not ignore otherwise. Just specify the annotation @JSONProperty as @JSONProperty {val ignoreIfNull = true}.

h3. Serialization with Type Hints for Generic Data Members

Consider the following Scala class:
<pre>
@BeanInfo
case class Contact(name: String,
                   @JSONTypeHint(classOf[Address])
                   addresses: Map[String, Address]) {

  override def toString = "name = " + name + " addresses = " +
    addresses.map(a => a._1 + ":" + a._2.toString).mkString(",")
}
</pre>

Because of erasure, you need to add the type hint declaratively through the annotation @JSONTypeHint that
SJSON will pick up during serialization. No we can say:
<pre>
val c = Contact("Bob", Map("residence" -> a1, "office" -> a2, "club" -> a3))
val co = serializer.out(c)
it("should give an instance of Contact") {
  c should equal(serializer.in[Contact](co))
}
</pre>

With optional generic data members, we need to provide the hint to SJSON through another annotation@OptionTypeHint.
<pre>
@BeanInfo
case class ContactWithOptionalAddr(name: String,
                              @JSONTypeHint(classOf[Address])
                              @OptionTypeHint(classOf[Map[_,_]])
                              addresses: Option[Map[String, Address]]) {

  override def toString = "name = " + name + " " +
    (addresses match {
      case None => ""
      case Some(ad) => " addresses = " + ad.map(a => a._1 + ":" + a._2.toString).mkString(",")
    })
}
</pre>

Serialization works ok with optional members annotated as above.
<pre>
describe("Bean with optional bean member serialization") {
  it("should serialize with Option defined") {
    val c = new ContactWithOptionalAddr("Debasish Ghosh",
      Some(Map("primary" -> new Address("10 Market Street", "San Francisco, CA", "94111"),
          "secondary" -> new Address("3300 Tamarac Drive", "Denver, CO", "98301"))))
    c should equal(
      serializer.in[ContactWithOptionalAddr](serializer.out(c)))
  }
}
</pre>

You can also specify a custom ClassLoader while using SJSON serializer:
<pre>
object SJSON {
  val classLoader = //.. specify a custom classloader
}
import SJSON._
serializer.out(..)
//..
</pre>

h3. Fighting Type Erasure

Because of type erasure, it's not always possible to infer the correct type during de-serialization of objects. Consider the following example:

<pre>
abstract class A
@BeanInfo case class B(param1: String) extends A
@BeanInfo case class C(param1: String, param2: String) extends A

@BeanInfo case class D(@JSONTypeHint(classOf[A])param1: List[A])
</pre>
and the serialization code like the following:

<pre>
object TestSerialize{
 def main(args: Array[String]) {
   val test1 = new D(List(B("hello1")))
   val json = sjson.json.Serializer.SJSON.out(test1)
   val res = sjson.json.Serializer.SJSON.in[D](json)
   val res1: D = res.asInstanceOf[D]
   println(res1)
 }
}
</pre>
Note that the type hint on class D says A, but the actual instances that have been put into the object before serialization is one of the derived classes (B). During de-serialization, we have no idea of what can be inside D. The serializer.in API will fail since all hint it has is for A, which is abstract. In such cases, we need to handle the de-serialization by using extractors over the underlying data structure that we use for storing JSON objects, which is JsValue. Here's an example:

<pre>
val test1 = new D(List(B("hello1")))
val json = serializer.out(test1)

// create a JsValue from the string
val js = Js(new String(json))

// extract the named list argument
val m = (Symbol("param1") ? list)
val m(_m) = js

// extract the string within
val s = (Symbol("param1") ? str)

// form a list of B's
val result = _m.map{ e =>
  val s(_s) = e
  B(_s)
}

// form a D
println("result = " + D(result))
</pre>
The above snippet de-serializes correctly using extractors defined on JsValue. For more details on JsValue and the extractors, please refer to "dispatch-json":http://databinder.net/dispatch/About.

h3. Note:

Serialization with SJSON is based on bean introspection. In the current version of Scala (2.8.0.Beta1 and 2.7.7) there is a bug where bean introspection does not work properly for classes enclosed within another class. Please ensure that the beans are the top level classes in your application. They can be within objects though. A ticket has been filed in the Scala Tracker and also fixed in the trunk. Here's the "ticket":https://lampsvn.epfl.ch/trac/scala/ticket/3080.

